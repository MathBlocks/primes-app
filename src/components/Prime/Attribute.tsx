import styled from 'styled-components'
import { FC } from 'react'
import { useToggle } from 'react-use'
import 'katex/dist/katex.min.css'
import Latex from 'react-latex-next'

import { ATTRIBUTE_NAMES, Attributes } from '../../attributes'
import { Modal } from '../Modal'

const WeirdNumber: FC = () => (
  <div>
    <a
      href="https://en.wikipedia.org/wiki/Abundant_number"
      rel="noreferrer"
      target="_blank"
    >
      Abundant
    </a>{' '}
    but not{' '}
    <a
      href="https://en.wikipedia.org/wiki/Semiperfect_number"
      rel="noreferrer"
      target="_blank"
    >
      semiperfect
    </a>
    .
  </div>
)
const LuckyNumber: FC = () => (
  <div>
    Belongs to the sequence generated by the sieve defined in{' '}
    <a
      href="https://doi.org/10.2307%2F3029719"
      rel="noreferrer"
      target="_blank"
    >
      Gardiner, Lazarus, Metropolis and Ulam (1956)
    </a>
    .
  </div>
)

const ATTRIBUTE_DESCRIPTIONS: Record<
  keyof Attributes,
  [FC | string, string]
> = {
  taxicabNumber: [
    'Can be expressed as a sum of two cubes in more than one way.',
    'https://en.wikipedia.org/wiki/Taxicab_number',
  ],
  perfectNumber: [
    'Equal to the sum of its positive divisors, excluding the number itself.',
    'https://en.wikipedia.org/wiki/Perfect_number',
  ],
  eulersLuckyNumbers: [
    '$n$ such that for all integers $k$ with $1 ≤ k < n$, the polynomial $k^2 - k + n$ produces a prime number.',
    'https://en.wikipedia.org/wiki/Lucky_numbers_of_Euler',
  ],
  uniquePrimeNumber: [
    'A prime $p \\neq 2,5$ for which there is no other prime $q$ such that the period length of the decimal expansion of its reciprocal, $1 / p$, is equal to the period length of the reciprocal of q, $1 / q$.',
    'https://en.wikipedia.org/wiki/Unique_prime_number',
  ],
  friendlyNumber: [
    'Has many many divisors. Formally, $n$ for which there is an $ε > 0$ such that for all $k > 1$,  $\\frac{\\sigma(n)}{n^{1+\\varepsilon}}\\geq\\frac{\\sigma(k)}{k^{1+\\varepsilon}}$',
    'https://en.wikipedia.org/wiki/Friendly_number',
  ],
  colossallyAbundantNumber: [
    'Has an abundancy index---the ratio between the sum of divisors of a number and the number itself---that is shared by at least one other natural number.',
    'https://en.wikipedia.org/wiki/Colossally_abundant_number',
  ],
  fibonacciNumber: [
    'Belongs to the famous sequence in which each number is the sum of the two preceding ones.',
    'https://en.wikipedia.org/wiki/Fibonacci_number',
  ],
  repdigit: [
    'Composed of repeated instances of the same digit in decimal.',
    'https://en.wikipedia.org/wiki/Repdigit',
  ],
  weirdNumber: [
    WeirdNumber,
    'https://en.wikipedia.org/wiki/Weird_number',
  ],
  triangularNumber: [
    'Forms an equilateral triangle when arranged geometrically.',
    'https://en.wikipedia.org/wiki/Triangular_number',
  ],
  sophieGermainPrime: [
    'A prime $p$ such that $2p + 1$ is also a prime.',
    'https://en.wikipedia.org/wiki/Safe_and_Sophie_Germain_primes',
  ],
  strongPrime: [
    'A prime that is greater than the arithmetic mean of the nearest prime above and below.',
    'https://en.wikipedia.org/wiki/Strong_prime',
  ],
  frugalNumber: [
    'In a given number base (base-10 in our case), has more digits than the number of digits in its prime factorization in the given number base (including exponents).',
    'https://en.wikipedia.org/wiki/Frugal_number',
  ],
  squareNumber: [
    'Product of an integer with itself, also forms a square when arranged geometrically.',
    'https://en.wikipedia.org/wiki/Square_number',
  ],
  emirp: [
    'A prime that results in a different prime when its decimal digits are reversed.',
    'https://en.wikipedia.org/wiki/Emirp',
  ],
  magicNumber: [
    'Composed of digits $abcde\\dots$ such that $a\\neq 0$,  $ab$ is a multiple of 2, $abc$ is a multiple of 3, $abcd$ is a multiple of 4, and so on.',
    'https://en.wikipedia.org/wiki/Polydivisible_number',
  ],
  luckyNumber: [
    LuckyNumber,
    'https://en.wikipedia.org/wiki/Lucky_number',
  ],
  goodPrime: [
    'A prime whose square is greater than the product of any two primes at the same number of positions before and after it in the sequence of primes',
    'https://en.wikipedia.org/wiki/Good_prime',
  ],
  happyNumber: [
    'Eventually reaches 1 when replaced by the sum of the square of each digit.',
    'https://en.wikipedia.org/wiki/Happy_number',
  ],
  untouchableNumber: [
    'Cannot be expressed as the sum of all the proper divisors of any positive integer (including the untouchable number itself).',
    'https://en.wikipedia.org/wiki/Untouchable_number',
  ],
  semiperfectNumber: [
    'Equal to the sum of all or some of its proper divisors.',
    'https://en.wikipedia.org/wiki/Semiperfect_number',
  ],
  harshadNumber: [
    'Divisible by the sum of its digits when written in a given base (base-10 in our case).',
    'https://en.wikipedia.org/wiki/Harshad_number',
  ],
  evilNumber: [
    'Has an even number of 1s in its binary expansion, a word-play on "even".',
    'https://en.wikipedia.org/wiki/Evil_number',
  ],
  unit: ['The unit of counting.', 'https://en.wikipedia.org/wiki/1'],
  prime: [
    'A natural number greater than 1 that is not a product of two smaller natural numbers.',
    'https://en.wikipedia.org/wiki/Prime_number',
  ],
  composite: [
    'A positive integer that can be formed by multiplying two smaller positive integers',
    'https://en.wikipedia.org/wiki/Composite_number',
  ],
}

const ModalContent = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  gap: 2rem;

  .symbol {
    animation: spin 2s ease-in-out infinite alternate;
    overflow: visible;
    margin-top: 1rem;
  }
  svg {
    width: 6rem;
    height: auto;
  }

  @keyframes spin {
    0% {
      transform: scale(1);
    }
    100% {
      transform: scale(1.2);
    }
  }

  .description {
    line-height: 1.7rem;
    max-width: 40ch;
  }

  .katex-display {
    display: inline-block;
    margin: 0;
  }
`

const Container = styled.div`
  border: 1px white solid;
  border-radius: 1rem;
  padding: 0.25rem 1rem;
  color: white;
  display: flex;
  gap: 0.5rem;
  align-items: center;
  cursor: pointer;
  > :first-child {
    height: 1rem;
    width: auto;
  }
  &:hover {
    color: #9890f4;
    border-color: #9890f4;
  }
`

export const Attribute: FC<{ id: keyof Attributes }> = ({ id }) => {
  const [name, Symbol] = ATTRIBUTE_NAMES[id]
  const [isOpen, toggleIsOpen] = useToggle(false)
  const [Description, link] = ATTRIBUTE_DESCRIPTIONS[id]
  return (
    <Container onClick={toggleIsOpen}>
      <Symbol />
      <span>{name}</span>
      <Modal
        title={name}
        isOpen={isOpen}
        onEscapeKeydown={toggleIsOpen}
        onBackgroundClick={(event) => {
          event.stopPropagation()
          toggleIsOpen(false)
        }}
      >
        <ModalContent>
          <div className="symbol">
            <Symbol />
          </div>
          <div className="description">
            {typeof Description === 'string' ? (
              <Latex>{Description}</Latex>
            ) : (
              <Description />
            )}
          </div>
          <a
            className="learn-more"
            href={link}
            target="_blank"
            rel="noreferrer"
          >
            Learn more
          </a>
        </ModalContent>
      </Modal>
    </Container>
  )
}
