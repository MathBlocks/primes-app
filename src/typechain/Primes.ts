/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type CoreDataStruct = {
  isPrime: boolean;
  primeIndex: BigNumberish;
  primeFactorCount: BigNumberish;
  parents: [BigNumberish, BigNumberish];
  lastBred: BigNumberish;
};

export type CoreDataStructOutput = [
  boolean,
  number,
  number,
  [number, number],
  number
] & {
  isPrime: boolean;
  primeIndex: number;
  primeFactorCount: number;
  parents: [number, number];
  lastBred: number;
};

export type PrimeDataStruct = {
  sexyPrimes: [BigNumberish, BigNumberish];
  twins: [BigNumberish, BigNumberish];
  cousins: [BigNumberish, BigNumberish];
};

export type PrimeDataStructOutput = [
  [number, number],
  [number, number],
  [number, number]
] & {
  sexyPrimes: [number, number];
  twins: [number, number];
  cousins: [number, number];
};

export type NumberDataStruct = { core: CoreDataStruct; prime: PrimeDataStruct };

export type NumberDataStructOutput = [
  CoreDataStructOutput,
  PrimeDataStructOutput
] & { core: CoreDataStructOutput; prime: PrimeDataStructOutput };

export interface PrimesInterface extends ethers.utils.Interface {
  functions: {
    "BREEDING_COOLDOWN()": FunctionFragment;
    "ERC712_VERSION()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "attributesRootHash()": FunctionFragment;
    "auctionHouse()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "batch0whitelist()": FunctionFragment;
    "batch1whitelist()": FunctionFragment;
    "batchCheck()": FunctionFragment;
    "batchStartTime()": FunctionFragment;
    "breedPrimes(uint16,uint16,uint256,bytes32[])": FunctionFragment;
    "cousins(uint256)": FunctionFragment;
    "crossBreed(uint16,uint16,uint256,bytes32[])": FunctionFragment;
    "data(uint256)": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "fetchPrime(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getAttributes(uint256)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getDomainSeperator()": FunctionFragment;
    "getNextPrime()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getNumberData(uint256)": FunctionFragment;
    "getPrimeFactors(uint16,((bool,uint16,uint8,uint16[2],uint32),(uint16[2],uint16[2],uint16[2])))": FunctionFragment;
    "initBatch0(uint256[],uint256,bytes32)": FunctionFragment;
    "initBatch1(uint256[],uint256,bytes32)": FunctionFragment;
    "initBatch2(uint256[],uint256)": FunctionFragment;
    "initPrimes(uint256[],uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "list(uint16,uint96,uint32,uint16[])": FunctionFragment;
    "mintRandomPrime(bytes32[])": FunctionFragment;
    "mintRandomPrimes(uint256,bytes32[])": FunctionFragment;
    "name()": FunctionFragment;
    "nonce()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "proxyRegistryAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rental(uint256)": FunctionFragment;
    "rescueSale()": FunctionFragment;
    "revealAttributes(uint256,uint256,bytes32[])": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setupAddr()": FunctionFragment;
    "sexyPrimes(uint256)": FunctionFragment;
    "start(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "twins(uint256)": FunctionFragment;
    "unlist(uint16)": FunctionFragment;
    "users(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BREEDING_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC712_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attributesRootHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionHouse",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batch0whitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batch1whitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "breedPrimes",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cousins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "crossBreed",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "data", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPrime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextPrime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNumberData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimeFactors",
    values: [BigNumberish, NumberDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initBatch0",
    values: [BigNumberish[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initBatch1",
    values: [BigNumberish[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initBatch2",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initPrimes",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintRandomPrime",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintRandomPrimes",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxyRegistryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rental",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealAttributes",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setupAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sexyPrimes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "start", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "twins", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "unlist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BREEDING_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC712_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attributesRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batch0whitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batch1whitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchCheck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "breedPrimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cousins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crossBreed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fetchPrime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextPrime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrimeFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initBatch0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initBatch1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initBatch2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initPrimes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintRandomPrime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintRandomPrimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyRegistryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rental", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rescueSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revealAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sexyPrimes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BatchStarted(uint256)": EventFragment;
    "Bred(uint16,uint256,uint256)": EventFragment;
    "Initialized()": EventFragment;
    "Listed(uint16)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PrimeClaimed(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnListed(uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Listed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrimeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnListed"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type BatchStartedEvent = TypedEvent<[BigNumber], { batchId: BigNumber }>;

export type BatchStartedEventFilter = TypedEventFilter<BatchStartedEvent>;

export type BredEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  { tokenId: number; parent1: BigNumber; parent2: BigNumber }
>;

export type BredEventFilter = TypedEventFilter<BredEvent>;

export type InitializedEvent = TypedEvent<[], {}>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type ListedEvent = TypedEvent<[number], { tokenId: number }>;

export type ListedEventFilter = TypedEventFilter<ListedEvent>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  { userAddress: string; relayerAddress: string; functionSignature: string }
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PrimeClaimedEvent = TypedEvent<[BigNumber], { tokenId: BigNumber }>;

export type PrimeClaimedEventFilter = TypedEventFilter<PrimeClaimedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnListedEvent = TypedEvent<[number], { tokenId: number }>;

export type UnListedEventFilter = TypedEventFilter<UnListedEvent>;

export interface Primes extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrimesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BREEDING_COOLDOWN(overrides?: CallOverrides): Promise<[BigNumber]>;

    ERC712_VERSION(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attributesRootHash(overrides?: CallOverrides): Promise<[string]>;

    auctionHouse(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    batch0whitelist(overrides?: CallOverrides): Promise<[string]>;

    batch1whitelist(overrides?: CallOverrides): Promise<[string]>;

    batchCheck(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        active: boolean;
        batch: BigNumber;
        remaining: BigNumber;
      }
    >;

    batchStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    breedPrimes(
      _parent1: BigNumberish,
      _parent2: BigNumberish,
      _attributes: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cousins(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[number, number]]>;

    crossBreed(
      _parent1: BigNumberish,
      _parent2: BigNumberish,
      _attributes: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    data(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, number] & {
        isPrime: boolean;
        primeIndex: number;
        primeFactorCount: number;
        lastBred: number;
      }
    >;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchPrime(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { primeNumber: number }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAttributes(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ]
      ] & {
        attributes: [
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean
        ];
      }
    >;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDomainSeperator(overrides?: CallOverrides): Promise<[string]>;

    getNextPrime(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    getNumberData(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[NumberDataStructOutput]>;

    getPrimeFactors(
      _tokenId: BigNumberish,
      _numberData: NumberDataStruct,
      overrides?: CallOverrides
    ): Promise<[number[]] & { factors: number[] }>;

    initBatch0(
      _data: BigNumberish[],
      _length: BigNumberish,
      _batch0whitelist: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initBatch1(
      _data: BigNumberish[],
      _length: BigNumberish,
      _batch1whitelist: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initBatch2(
      _data: BigNumberish[],
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initPrimes(
      _data: BigNumberish[],
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    list(
      _tokenId: BigNumberish,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      _suitors: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintRandomPrime(
      _merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintRandomPrimes(
      _count: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proxyRegistryAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rental(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, number] & {
        isRentable: boolean;
        whitelistOnly: boolean;
        studFee: BigNumber;
        deadline: number;
      }
    >;

    rescueSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealAttributes(
      _tokenId: BigNumberish,
      _attributes: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupAddr(overrides?: CallOverrides): Promise<[string]>;

    sexyPrimes(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[number, number]]>;

    start(
      _auctionHouse: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { output: string }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    twins(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[number, number]]>;

    unlist(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, number] & { tranche0: number; tranche1: number }>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BREEDING_COOLDOWN(overrides?: CallOverrides): Promise<BigNumber>;

  ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attributesRootHash(overrides?: CallOverrides): Promise<string>;

  auctionHouse(overrides?: CallOverrides): Promise<string>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  batch0whitelist(overrides?: CallOverrides): Promise<string>;

  batch1whitelist(overrides?: CallOverrides): Promise<string>;

  batchCheck(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      active: boolean;
      batch: BigNumber;
      remaining: BigNumber;
    }
  >;

  batchStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  breedPrimes(
    _parent1: BigNumberish,
    _parent2: BigNumberish,
    _attributes: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cousins(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  crossBreed(
    _parent1: BigNumberish,
    _parent2: BigNumberish,
    _attributes: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  data(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, number, number] & {
      isPrime: boolean;
      primeIndex: number;
      primeFactorCount: number;
      lastBred: number;
    }
  >;

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchPrime(_index: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAttributes(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean,
      boolean
    ]
  >;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getDomainSeperator(overrides?: CallOverrides): Promise<string>;

  getNextPrime(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getNumberData(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<NumberDataStructOutput>;

  getPrimeFactors(
    _tokenId: BigNumberish,
    _numberData: NumberDataStruct,
    overrides?: CallOverrides
  ): Promise<number[]>;

  initBatch0(
    _data: BigNumberish[],
    _length: BigNumberish,
    _batch0whitelist: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initBatch1(
    _data: BigNumberish[],
    _length: BigNumberish,
    _batch1whitelist: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initBatch2(
    _data: BigNumberish[],
    _length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initPrimes(
    _data: BigNumberish[],
    _length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  list(
    _tokenId: BigNumberish,
    _fee: BigNumberish,
    _deadline: BigNumberish,
    _suitors: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintRandomPrime(
    _merkleProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintRandomPrimes(
    _count: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  proxyRegistryAddress(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rental(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, number] & {
      isRentable: boolean;
      whitelistOnly: boolean;
      studFee: BigNumber;
      deadline: number;
    }
  >;

  rescueSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealAttributes(
    _tokenId: BigNumberish,
    _attributes: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupAddr(overrides?: CallOverrides): Promise<string>;

  sexyPrimes(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  start(
    _auctionHouse: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  twins(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  unlist(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[number, number] & { tranche0: number; tranche1: number }>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BREEDING_COOLDOWN(overrides?: CallOverrides): Promise<BigNumber>;

    ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    attributesRootHash(overrides?: CallOverrides): Promise<string>;

    auctionHouse(overrides?: CallOverrides): Promise<string>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    batch0whitelist(overrides?: CallOverrides): Promise<string>;

    batch1whitelist(overrides?: CallOverrides): Promise<string>;

    batchCheck(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        active: boolean;
        batch: BigNumber;
        remaining: BigNumber;
      }
    >;

    batchStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    breedPrimes(
      _parent1: BigNumberish,
      _parent2: BigNumberish,
      _attributes: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    cousins(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    crossBreed(
      _parent1: BigNumberish,
      _parent2: BigNumberish,
      _attributes: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    data(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, number] & {
        isPrime: boolean;
        primeIndex: number;
        primeFactorCount: number;
        lastBred: number;
      }
    >;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    fetchPrime(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAttributes(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ]
    >;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<string>;

    getNextPrime(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNumberData(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<NumberDataStructOutput>;

    getPrimeFactors(
      _tokenId: BigNumberish,
      _numberData: NumberDataStruct,
      overrides?: CallOverrides
    ): Promise<number[]>;

    initBatch0(
      _data: BigNumberish[],
      _length: BigNumberish,
      _batch0whitelist: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initBatch1(
      _data: BigNumberish[],
      _length: BigNumberish,
      _batch1whitelist: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initBatch2(
      _data: BigNumberish[],
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initPrimes(
      _data: BigNumberish[],
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    list(
      _tokenId: BigNumberish,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      _suitors: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintRandomPrime(
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintRandomPrimes(
      _count: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    proxyRegistryAddress(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rental(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, number] & {
        isRentable: boolean;
        whitelistOnly: boolean;
        studFee: BigNumber;
        deadline: number;
      }
    >;

    rescueSale(overrides?: CallOverrides): Promise<void>;

    revealAttributes(
      _tokenId: BigNumberish,
      _attributes: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setupAddr(overrides?: CallOverrides): Promise<string>;

    sexyPrimes(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    start(_auctionHouse: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    twins(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    unlist(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, number] & { tranche0: number; tranche1: number }>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BatchStarted(uint256)"(batchId?: null): BatchStartedEventFilter;
    BatchStarted(batchId?: null): BatchStartedEventFilter;

    "Bred(uint16,uint256,uint256)"(
      tokenId?: null,
      parent1?: null,
      parent2?: null
    ): BredEventFilter;
    Bred(tokenId?: null, parent1?: null, parent2?: null): BredEventFilter;

    "Initialized()"(): InitializedEventFilter;
    Initialized(): InitializedEventFilter;

    "Listed(uint16)"(tokenId?: null): ListedEventFilter;
    Listed(tokenId?: null): ListedEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PrimeClaimed(uint256)"(tokenId?: null): PrimeClaimedEventFilter;
    PrimeClaimed(tokenId?: null): PrimeClaimedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "UnListed(uint16)"(tokenId?: null): UnListedEventFilter;
    UnListed(tokenId?: null): UnListedEventFilter;
  };

  estimateGas: {
    BREEDING_COOLDOWN(overrides?: CallOverrides): Promise<BigNumber>;

    ERC712_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attributesRootHash(overrides?: CallOverrides): Promise<BigNumber>;

    auctionHouse(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    batch0whitelist(overrides?: CallOverrides): Promise<BigNumber>;

    batch1whitelist(overrides?: CallOverrides): Promise<BigNumber>;

    batchCheck(overrides?: CallOverrides): Promise<BigNumber>;

    batchStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    breedPrimes(
      _parent1: BigNumberish,
      _parent2: BigNumberish,
      _attributes: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cousins(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crossBreed(
      _parent1: BigNumberish,
      _parent2: BigNumberish,
      _attributes: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    data(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchPrime(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAttributes(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<BigNumber>;

    getNextPrime(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNumberData(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimeFactors(
      _tokenId: BigNumberish,
      _numberData: NumberDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initBatch0(
      _data: BigNumberish[],
      _length: BigNumberish,
      _batch0whitelist: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initBatch1(
      _data: BigNumberish[],
      _length: BigNumberish,
      _batch1whitelist: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initBatch2(
      _data: BigNumberish[],
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initPrimes(
      _data: BigNumberish[],
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    list(
      _tokenId: BigNumberish,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      _suitors: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintRandomPrime(
      _merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintRandomPrimes(
      _count: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxyRegistryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rental(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rescueSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealAttributes(
      _tokenId: BigNumberish,
      _attributes: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupAddr(overrides?: CallOverrides): Promise<BigNumber>;

    sexyPrimes(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    start(
      _auctionHouse: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    twins(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlist(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BREEDING_COOLDOWN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERC712_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attributesRootHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batch0whitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batch1whitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    breedPrimes(
      _parent1: BigNumberish,
      _parent2: BigNumberish,
      _attributes: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cousins(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crossBreed(
      _parent1: BigNumberish,
      _parent2: BigNumberish,
      _attributes: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    data(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchPrime(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAttributes(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDomainSeperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextPrime(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberData(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrimeFactors(
      _tokenId: BigNumberish,
      _numberData: NumberDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initBatch0(
      _data: BigNumberish[],
      _length: BigNumberish,
      _batch0whitelist: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initBatch1(
      _data: BigNumberish[],
      _length: BigNumberish,
      _batch1whitelist: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initBatch2(
      _data: BigNumberish[],
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initPrimes(
      _data: BigNumberish[],
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    list(
      _tokenId: BigNumberish,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      _suitors: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintRandomPrime(
      _merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintRandomPrimes(
      _count: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyRegistryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rental(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rescueSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealAttributes(
      _tokenId: BigNumberish,
      _attributes: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sexyPrimes(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    start(
      _auctionHouse: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    twins(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlist(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
